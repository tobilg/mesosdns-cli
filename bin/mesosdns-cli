#!/usr/bin/env node

"use strict";

process.title = "mesosdns-cli";

var MesosDNSClient = require("mesosdns-client"),
    argv = require("optimist").argv;

var defaultPortIndex = 0,
    serviceName = "",
    dnsServers = [],
    returnAllEndpoints = false,
    separator = ",";

if (argv.help) {
    console.log("mesosdns-cli usage:");
    console.log("--------------------------");
    console.log(" ");
    console.log("Mandatory arguments:");
    console.log(" ");
    console.log("--serviceName <service name> : The Mesos DNS service name to be queried");
    console.log("--servers <comma separated ip addresses> : The Mesos DNS server ip address(es)");
    console.log(" ");
    console.log("Other arguments:");
    console.log(" ");
    console.log("--all : If provided, all endpoints will be returned in a concatenated manner. Standard separator is a comma, but can be specified by using --separator <separator>");
    console.log("--separator <separator> : The separator which should be used if the --all option is provided");
    console.log("--portIndex <port index number> : The port index of the service name that should be queried");
    console.log("--strategy <strategy name> : The strategy how to choose from the list of results (either 'weighted' or  'random')");
    process.exit(0);
}

if (argv.portIndex) {
    defaultPortIndex = parseInt(argv.portIndex);
}

if (argv.all) {
    returnAllEndpoints = true;
}

if (argv.separator && argv.separator.length > 0) {
    console.log("sep: " + argv.separator);
    separator = argv.separator;
}

if (!argv.serviceName) {
    console.log("You have to at least specify a service name (e.g. --serviceName myservice.framework.mesos)");
    process.exit(1);
} else {
    serviceName = argv.serviceName;
}

if (!argv.servers && !process.env.MESOSDNS_SERVERS) {
    console.log("You have to either specify a MESOSDNS_SERVERS environment variable, or the parameter --servers (e.g. --servers 192.168.0.1)");
    process.exit(1);
} else {

    var tempServers = argv.servers || process.env.MESOSDNS_SERVERS;

    if (tempServers.length > 7 && tempServers.split(/\./).length > 3) {
        if (tempServers.indexOf(",") > -1) {
            dnsServers = tempServers.split(",");
        } else {
            dnsServers.push(tempServers);
        }
    } else {
        console.log("Please specify a correct IP address!");
        process.exit(1);
    }
}

var options = {
    "dnsServers": dnsServers,
    "defaultPortIndex": defaultPortIndex
};

if (argv.strategy) {
    if (argv.strategy === "weighted" || argv.strategy === "random") {
        options.strategy = argv.strategy;
    } else {
        console.log("Please specify a correct strategy (either 'weighted' or  'random')");
    }
}

var dnsClient = new MesosDNSClient(options);

dnsClient.get(serviceName, defaultPortIndex, function(err, endpointResult) {
    if (err) {
        console.error("No valid endpoints returned!");
        if (err.message) {
            console.error("Message from mesosdns-client: " + err.message);
        }
        process.exit(1);
    } else {
        if (endpointResult) {
            if (returnAllEndpoints) {
                var endpointStrings = [];
                if (endpointResult.allEndpoints && Array.isArray(endpointResult.allEndpoints) && endpointResult.allEndpoints.length > 0) {
                    endpointResult.allEndpoints.forEach(function(endpoint) {
                        endpointStrings.push(endpoint.host+":"+endpoint.port);
                    });
                    console.log(endpointStrings.join(separator));
                    process.exit(0);
                } else {
                    console.error("No valid endpoints returned!");
                    process.exit(1);
                }
            } else {
                console.log(endpointResult.endpoint);
                process.exit(0);
            }
        } else {
            console.error("No valid endpoints returned!");
            process.exit(1);
        }
    }
});